@inject ApiConnection _apiCall

@if (departures is not null)
{
   <br/>
   <table  class="table">
       <thead>
           <tr>
               <th scope="col">Avgångstid</th>
               <th scope="col">Mot</th>
               <th scope="col">Från spår</th>
               <th scope="col">Tågnummer</th>
               <th scope="col">Info om resan</th>
           </tr>
       </thead>
       @foreach (var departure in departures)
       {
        <tbody>
        <tr>
            @if (departure.Announcements.Canceled != true)
            {
                @if (departure.Announcements.EstimatedTimeAtLocation is null)
                {
                            var departureTime = @departure.Announcements.AdvertisedTimeAtLocation.Value;
                            <th scope="row">@departureTime.ToShortTimeString()</th>
                }
                else
                {
                    var estimatedTime = @departure.Announcements.EstimatedTimeAtLocation.Value;
                    <th scope="row" style="background-color:blue;">@estimatedTime.ToShortTimeString()</th>
                }

                @if (departure.LocationFullName != "")
                {
                    <th scope="row">@departure.LocationFullName</th>
                }  
                <th scope="row">@departure.Announcements.TrackAtLocation</th>
                <th scope="row">@departure.Announcements.AdvertisedTrainIdent</th>

                @if (@departure.Announcements.Deviation is not null)
                {
                @foreach (var deviation in @departure.Announcements.Deviation)
                {
                    <th scope="row">@deviation</th>
                }
            }
        }          
            </tr>
        </tbody>
       }
   </table>
}

@code {
    [Parameter]
    public string LocationSignature { get; set; }
    public List<TrainDepartureModel> departures;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetDepartures();
    }
    private async void GetDepartures()
    {
        departures = await _apiCall.GetDeparturesAsync(LocationSignature);
    }
}
